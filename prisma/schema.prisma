// This is your Prisma schema file

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

enum Role {
    ADMIN
    STUDENT
}

enum SeasonStatus {
    OPEN
    IN_PROGRESS
    FINISHED
}

model User {
    id               String            @id @default(uuid())
    username         String            @unique
    email            String            @unique
    password         String
    role             Role              @default(STUDENT)
    resetToken       String?           @unique
    resetTokenExpiry DateTime?
    createdAt        DateTime          @default(now())
    updatedAt        DateTime          @updatedAt
    seasons          SeasonProgress[]
    attempts         QuestionAttempt[]
    scores           Score[]
}

model Season {
    id        String           @id @default(uuid())
    title     String
    startDate DateTime
    endDate   DateTime
    status    SeasonStatus     @default(OPEN)
    createdAt DateTime         @default(now())
    updatedAt DateTime         @updatedAt
    questions Question[]
    progress  SeasonProgress[]
}

model Question {
    id          String            @id @default(uuid())
    seasonId    String
    content     String
    optionA     String
    optionB     String
    optionC     String
    optionD     String
    answer      String
    explanation String
    points      Int               @default(10)
    orderIndex  Int
    createdAt   DateTime          @default(now())
    updatedAt   DateTime          @updatedAt
    season      Season            @relation(fields: [seasonId], references: [id])
    attempts    QuestionAttempt[]
}

model QuestionAttempt {
    id         String   @id @default(uuid())
    userId     String
    questionId String
    answer     String
    isCorrect  Boolean
    points     Int
    startTime  DateTime
    endTime    DateTime
    createdAt  DateTime @default(now())
    user       User     @relation(fields: [userId], references: [id])
    question   Question @relation(fields: [questionId], references: [id])
}

model SeasonProgress {
    id          String    @id @default(uuid())
    userId      String
    seasonId    String
    isCompleted Boolean   @default(false)
    startTime   DateTime  @default(now())
    endTime     DateTime?
    createdAt   DateTime  @default(now())
    updatedAt   DateTime  @updatedAt
    user        User      @relation(fields: [userId], references: [id])
    season      Season    @relation(fields: [seasonId], references: [id])

    @@unique([userId, seasonId])
}

model Score {
    id        String   @id @default(uuid())
    userId    String
    points    Int
    createdAt DateTime @default(now())
    user      User     @relation(fields: [userId], references: [id])
}
